// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

/*
Package ombwire is a generated protocol buffer package.

The package output for go is wirerecord

It is generated from these files:
	types.proto

It has these top-level messages:
	Record
	Bulletin
	Location
	Endorsement
*/
package ombwire

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Record_Type int32

const (
	Record_BLTN Record_Type = 1
	Record_ENDO Record_Type = 2
)

var Record_Type_name = map[int32]string{
	1: "BLTN",
	2: "ENDO",
}
var Record_Type_value = map[string]int32{
	"BLTN": 1,
	"ENDO": 2,
}

func (x Record_Type) Enum() *Record_Type {
	p := new(Record_Type)
	*p = x
	return p
}
func (x Record_Type) String() string {
	return proto.EnumName(Record_Type_name, int32(x))
}
func (x *Record_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Record_Type_value, data, "Record_Type")
	if err != nil {
		return err
	}
	*x = Record_Type(value)
	return nil
}

type Record struct {
	// Identifies which type is filled in.
	Type *Record_Type `protobuf:"varint,1,req,name=type,enum=ombwire.Record_Type" json:"type,omitempty"`
	// Only one of the following may be filled in.
	Bltn             *Bulletin    `protobuf:"bytes,2,opt,name=bltn" json:"bltn,omitempty"`
	Endo             *Endorsement `protobuf:"bytes,3,opt,name=endo" json:"endo,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}

func (m *Record) GetType() Record_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Record_BLTN
}

func (m *Record) GetBltn() *Bulletin {
	if m != nil {
		return m.Bltn
	}
	return nil
}

func (m *Record) GetEndo() *Endorsement {
	if m != nil {
		return m.Endo
	}
	return nil
}

type Bulletin struct {
	Message          *string   `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	Timestamp        *uint64   `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	Location         *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Bulletin) Reset()         { *m = Bulletin{} }
func (m *Bulletin) String() string { return proto.CompactTextString(m) }
func (*Bulletin) ProtoMessage()    {}

func (m *Bulletin) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Bulletin) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Bulletin) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// A single WGS84 Datum
type Location struct {
	Lat              *float64 `protobuf:"fixed64,1,req,name=lat" json:"lat,omitempty"`
	Lon              *float64 `protobuf:"fixed64,2,req,name=lon" json:"lon,omitempty"`
	H                *float64 `protobuf:"fixed64,3,req,name=h" json:"h,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}

func (m *Location) GetLat() float64 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

func (m *Location) GetLon() float64 {
	if m != nil && m.Lon != nil {
		return *m.Lon
	}
	return 0
}

func (m *Location) GetH() float64 {
	if m != nil && m.H != nil {
		return *m.H
	}
	return 0
}

type Endorsement struct {
	Bid              []byte  `protobuf:"bytes,1,req,name=bid" json:"bid,omitempty"`
	Timestamp        *uint64 `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Endorsement) Reset()         { *m = Endorsement{} }
func (m *Endorsement) String() string { return proto.CompactTextString(m) }
func (*Endorsement) ProtoMessage()    {}

func (m *Endorsement) GetBid() []byte {
	if m != nil {
		return m.Bid
	}
	return nil
}

func (m *Endorsement) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("ombwire.Record_Type", Record_Type_name, Record_Type_value)
}
